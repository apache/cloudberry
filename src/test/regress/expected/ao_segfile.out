create schema ao_segfile;
set search_path to ao_segfile;
set gp_appendonly_insert_files = 4;
-- ao table
create table ao_copy (a int) using ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Apache Cloudberry data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select segfilecount from pg_appendonly where relid = 'ao_copy'::regclass;
 segfilecount 
--------------
            0
(1 row)

set gp_appendonly_insert_files_tuples_range = 1;
-- ensure 4 files on 3 segments
COPY ao_copy from stdin;
analyze ao_copy;
select count(*) from ao_copy;
 count 
-------
    20
(1 row)

select segfilecount from pg_appendonly where relid = 'ao_copy'::regclass;
 segfilecount 
--------------
            4
(1 row)

reset gp_appendonly_insert_files_tuples_range;
-- aocs table
create table aocs_copy (a int) using ao_column;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Apache Cloudberry data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select segfilecount from pg_appendonly where relid = 'aocs_copy'::regclass;
 segfilecount 
--------------
            0
(1 row)

set gp_appendonly_insert_files_tuples_range = 1;
-- ensure 4 files on 3 segments
COPY aocs_copy from stdin;
analyze aocs_copy;
select count(*) from aocs_copy;
 count 
-------
    20
(1 row)

select segfilecount from pg_appendonly where relid = 'aocs_copy'::regclass;
 segfilecount 
--------------
            4
(1 row)

reset gp_appendonly_insert_files_tuples_range;
reset gp_appendonly_insert_files;
-- start_ignore
drop schema ao_segfile cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table ao_copy
drop cascades to table aocs_copy
-- end_ignore
