-- See src/backend/fts/README for background information
--
-- This tests two scenarios:
-- 1) Piggyback Test
-- Ensure multiple probe requests come in before the start of a new ftsLoop,
-- then all those requests share the same result.
--
-- 2) Fresh Result Test
-- Ensure fresh results when a probe request occurs during an in progress
-- ftsLoop.
--
-- It is useful to remember that the FtsLoop and each FtsNotifyProbe are
-- individual processes. Careful use of fault injectors are needed to have
-- complete and consistent control over the flow of the two independent
-- processes - the ftsLoop and FtsNotifyProber's.
--
-- NOTE: you must add '--load-extension=gp_inject_fault' to the commandline
--   for a manual test.

select gp_inject_fault('all', 'reset', 1) from master();
 gp_inject_fault 
-----------------
 Success:        
(1 row)

create temp table fts_probe_results(seq serial, seq_name varchar(20), current_started int, expected_start_delta int, current_done int, expected_done_delta int);
CREATE TABLE

-- create extension only on coordinator since the fts process is only on coordinator
create or replace function fts_probe_stats() returns table ( start_count int, done_count int, status_version int2 ) as '/@abs_builddir@/../regress/regress.so', 'gp_fts_probe_stats' language c execute on coordinator reads sql data;
CREATE FUNCTION

create or replace view get_raw_stats as select seq, seq_name, current_started, expected_start_delta, current_started - min(current_started) over () as actual_start_delta, -- actual_start_delta = current_started - initial_started current_done, expected_done_delta, current_done - min(current_done) over () as actual_done_delta -- actual_done_delta = current_done - initial_done from fts_probe_results order by seq;
CREATE VIEW

create or replace view get_stats as select seq, seq_name, expected_start_delta, actual_start_delta, expected_done_delta, actual_done_delta from get_raw_stats order by seq desc limit 1;
CREATE VIEW

drop function if exists insert_expected_stats(int, int);
DROP FUNCTION
create or replace function insert_expected_stats(seq_name varchar(20), expected_start_delta int, expected_done_delta int) returns void as $$ INSERT INTO fts_probe_results (seq_name, current_started, expected_start_delta, current_done, expected_done_delta) /* inside a function */ SELECT seq_name, /* inside a function */ start_count AS current_started, /* inside a function */ expected_start_delta, /* inside a function */ done_count AS current_done, /* inside a function */ expected_done_delta /* inside a function */ FROM fts_probe_stats(); /* inside a function */ $$ language sql volatile;
CREATE FUNCTION

-- ensure the internal regular probes do not affect our test
!\retcode gpconfig -c gp_fts_probe_interval -v 3600;
-- start_ignore
20190730:11:15:27:045870 gpconfig:office-5-75:dkrieger-[INFO]:-completed successfully with parameters '-c gp_fts_probe_interval -v 3600'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Starting gpstop with args: -u
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Gathering information and validating the environment...
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Obtaining Greenplum Coordinator catalog information
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Obtaining Segment details from coordinator...
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.575.g59811832fc build dev'
20190730:11:15:27:045929 gpstop:office-5-75:dkrieger-[INFO]:-Signalling all postmaster processes to reload

-- end_ignore
(exited with code 0)

-- ensure there is no in progress ftsLoop after reloading the gp_fts_probe_interval
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

select * from get_stats;
 seq | seq_name | expected_start_delta | actual_start_delta | expected_done_delta | actual_done_delta 
-----+----------+----------------------+--------------------+---------------------+-------------------
(0 rows)

-- piggyback test: start multiple probes
select gp_inject_fault_infinite('ftsNotify_before', 'suspend', 1) from master();
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)

1&: select gp_request_fts_probe_scan();  <waiting ...>
2&: select gp_request_fts_probe_scan();  <waiting ...>
3&: select gp_request_fts_probe_scan();  <waiting ...>

-- piggyback: ensure the probe requests are at a known starting location
select gp_wait_until_triggered_fault('ftsNotify_before', 3, 1) from master();
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

-- piggyback: ensure the ftsLoop is at a known starting location
select * from get_stats;
 seq | seq_name | expected_start_delta | actual_start_delta | expected_done_delta | actual_done_delta 
-----+----------+----------------------+--------------------+---------------------+-------------------
(0 rows)
select gp_inject_fault('ftsNotify_before', 'resume', 1) from master();
 gp_inject_fault 
-----------------
 Success:        
(1 row)

select * from get_stats;
 seq | seq_name | expected_start_delta | actual_start_delta | expected_done_delta | actual_done_delta 
-----+----------+----------------------+--------------------+---------------------+-------------------
(0 rows)

-- fresh result test: issue a new probe request during the in progress piggyback ftsLoop
4: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

1<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
2<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
3<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

select * from get_stats;
 seq | seq_name | expected_start_delta | actual_start_delta | expected_done_delta | actual_done_delta 
-----+----------+----------------------+--------------------+---------------------+-------------------
(0 rows)

-- show all raw stats for debugging
-- start_ignore
select * from get_raw_stats;
 seq | seq_name | current_started | expected_start_delta | actual_start_delta | current_done | expected_done_delta | actual_done_delta 
-----+----------+-----------------+----------------------+--------------------+--------------+---------------------+-------------------
(0 rows)
-- end_ignore
