/*-------------------------------------------------------------------------
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *-------------------------------------------------------------------------
 */

syntax = "proto2";
package pax.stats;

message ColumnDataStats {
  optional bytes minimal = 1;             // Minimal value stored as Datum.
  optional bytes maximum = 2;             // Maximum value stored as Datum.
  optional bytes sum = 3;                 // sum(c1) value. Invalid after existence of visable map
}

message ColumnBasicInfo {
  optional uint32 typid = 1;              // type oid of the column
  optional uint32 collation = 2;          // collation oid of the column
  optional uint32 opfamily = 3;           // deprecated.

  optional uint32 prorettype = 4;         // the sum(c1) return type
}

message BloomFilterBasicInfo {
  optional int32  bf_hash_funcs = 1;      // the number of hash functions
  optional uint64 bf_seed = 2;            // the seed of bloom filter
  optional uint64 bf_m = 3;               // the bits of bit sets in the bloom filter
}

message MicroPartitionStatisticsInfo
{
  repeated ColumnStats columnStats = 1;         // Statistics info stored by single column.
}

message ColumnStats {
  optional bool allnull = 1 [default=true];     // all-null value for single column.
  optional bool hasnull = 2 [default=false];    // has-null value for single column.
  optional ColumnBasicInfo info = 3;
  optional ColumnDataStats  dataStats = 4;      // minimal/maximum value stats.
  optional uint64 nonNullRows = 5 [default=0];  // count(c1) value. Invalid after existence of visable map
  optional BloomFilterBasicInfo bloomFilterInfo = 6; // The bloom filter basic info 
  optional bytes columnBFStats = 7;         // bloom filter stored by single column.
}


